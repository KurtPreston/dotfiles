# Text formatting params
autoload -U colors && colors

# Enable prompt substitution
setopt PROMPT_SUBST

parse_git_branch() {
  if git rev-parse --git-dir >/dev/null 2>&1; then
    gitver=$(git branch 2>/dev/null | sed -n '/^\*/s/^\* //p')
    
    # If we're on a detached HEAD (gitver will be like "(HEAD detached at abc1234)")
    if [[ "$gitver" =~ ^\(HEAD\ detached\ at\ ([a-f0-9]+)\)$ ]]; then
      current_sha=$(git rev-parse HEAD)
      short_sha=$(git rev-parse --short HEAD)
      # Check if current SHA matches any local branch
      matching_branch=$(git for-each-ref --format='%(refname:short)' refs/heads/ | while read branch; do
        if [[ "$(git rev-parse "$branch")" == "$current_sha" ]]; then
          echo "$branch"
          break
        fi
      done)
      
      if [[ -n "$matching_branch" ]]; then
        gitver="$matching_branch (detached)"
      else
        gitver="$short_sha (detached)"
      fi
    fi
    
    echo "$gitver"
  fi
}

branch_color() {
  if git rev-parse --git-dir >/dev/null 2>&1; then
    if git diff --quiet 2>/dev/null >&2; then
      echo "%F{green}"
    else
      echo "%F{red}"
    fi
  fi
}

git_prompt() {
  local branch=$(parse_git_branch)
  if [[ -n "$branch" ]]; then
    local color=$(branch_color)
    echo "[$color$branch%f] "
  fi
}

show_host_if_remote() {
  if [[ ! -z "$SSH_CONNECTION" ]]; then
    echo "%F{blue}$(hostname)%f"
  fi
}

show_colored_user() {
  if [[ "$(whoami)" = "root" ]]; then
    echo "%F{red}$(whoami)%f"
  else
    echo "$(whoami)"
  fi
}

show_path() {
  echo "%F{cyan}%~%f"
}

# Set the prompt
PS1='$(git_prompt)$(show_colored_user)@$(show_host_if_remote)$(show_path): '